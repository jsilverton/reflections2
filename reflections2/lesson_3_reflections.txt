Reflect: Using a remote repository
When would you want to use a remote repository rather than keeping all your work local?
- when want other people to share it
- when want to access code from multiple of my own computers
- for safety

Reflect: Manual vs. automatic pull
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- may want stable base of code to work with


Reflect: Forks, Clones, and Branches
Describe the differences between forks, clones, and branches. When would you use one instead of another?
fork is github concept, to copy a github repository into a new github repository
clone is copying either local or remote repository
branch is splitting one repository into 2 or more distinct paths.

Reflect: Local copies of remote branches
What is the benefit of having a copy of the last known state of the remote stored locally?
--a local diff works without having internet access
--could revert changes back to last known master head

Reflect: Collaboration using Git and GitHub
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
--could send around files as you update them (low-tech but difficult to track)
--could use another collaboration tool eg google docs (allows auto-versioning, but tool to learn for the team)

Reflect: When to use a separate branch
You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

Given that, please add the following question and your thoughts on it to your reflections file:

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

- use separate branch if want new version of code to live permanently alongside master
- use separate branch to allow parallel development of many features, without mixing them, allows to switch 'workspace', by using different branches for different work
