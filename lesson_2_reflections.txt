Reflect: Initializing a Repository
What happens when you initialize a repository? Why do you need to do it?
It adds .git folder with a lot of files.
So GIT knows it's a GIT repository, and can configure it before 1st commit?

Reflect: Staging Area
How is the staging area different from the working directory and the repository? What value do you think it offers?
- staging area is something tracked by GIT, working directory is not tracked by GIT
- it means can have version control operating on your files without having to change the master

Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?
Not sure - does every subcommit that you make to staging area get recorded? In which case, could stage little and often

Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
could keep all logical large changes on a branch rather than the master, until ready to commit the whole lot. Multiple people working on the same code base could use branching. Can switch between different features/bugs if working on them at the same time

Reflect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?
It is clear from the diagram how branches relate to each other, which commits are reachable, and what state each branch is in.

Reflect: Merging Two Branches
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Result of merging 2 branches is combination of the 2 together. Represent it in diagram as the drawing together of 2 branches as that's what it is.

Reflect: Automatic vs. Manual Merging
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automerge fast, accurate syntactically, dumb
Manual merge slower, maybe less accurate, but more intelligent

